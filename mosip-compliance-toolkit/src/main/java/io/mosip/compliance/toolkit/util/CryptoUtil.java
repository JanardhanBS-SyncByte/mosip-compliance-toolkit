package io.mosip.compliance.toolkit.util;

import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Security;
import java.util.Arrays;
import java.util.Base64;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

public final class CryptoUtil {

	public static void main(String[] args) {
		String transactionId = "SBI1018-533";
		String timestamp = "2022-12-08T11:13:46Z";
		byte[] xorResult = getXOR(timestamp, transactionId);
		byte[] aadBytes = getLastBytes(xorResult, 16);
		byte[] ivBytes = getLastBytes(xorResult, 12);
		
		String xorTransactionIdWithTimestamp = StringUtil.toUtf8String(xorResult);
		
		System.out.println("transactionId==" + transactionId);
		System.out.println("timestamp==" + timestamp);
		System.out.println("xorTransactionIdWithTimestampApp==" + xorTransactionIdWithTimestamp.length());
		String aad = StringUtil.base64UrlEncode(aadBytes);
		String iv = StringUtil.base64UrlEncode(ivBytes);

		System.out.println("aad==" + aad);
		System.out.println("iv==" + iv);

		String certThumbprint = "D0B0E78C5E8C4AF36B445159D95D6F6A02F344C93164669E833B71E59BEC6E66";
		String encryptedSessionkey = "MgfQ-kTuVPZ9PWsUMPKbJZ1vIDZxqRn_xSwth_PTMc7UlhWISMlkK01jjg8M3qwzdIS7aecS8C3JzMnDp4EsJnFpn4ZcLDbaIGQCIPVt-hkpBZYDWLpasJ1mjrpihRHXuipECF-aArVR0uNu0wogZHSfgIP9tQ5pHt3xFg2avH0LEPTeWO4gD5v-EHkb_nBdy6tSeurtbYnpzRgaHZV5Dxuii3gBVRBJTMAzAwC6oNMwS_S878DRSOuogFDzcJvVXoK2YBH50P9w_S-LHc6dbQP5Qa-XjTEPUMtZsv6OD3lCWv_WzJTCXaSQqlV71tx3Y9-Cr56Y8tuQ3DtBU3lHSA";
		String KEY_SPLITTER = "#KEY_SPLITTER#";
		String encryptedData = "";
		byte[] thumbprint = hexStringToByteArray(certThumbprint);
		byte[] sessionkey = StringUtil.base64UrlDecode(encryptedSessionkey);
		byte[] keySplitter = StringUtil.toUtf8ByteArray(KEY_SPLITTER);
		byte[] data = StringUtil.base64UrlDecode(encryptedData);

		String encodedData = StringUtil.base64UrlEncode(concatByteArrays(thumbprint, sessionkey, keySplitter, data));

		System.out.println("encodeddata==" + encodedData);
	}

	public static String getEncodedHash(byte[] bytes) throws NoSuchAlgorithmException, NoSuchProviderException {
		Security.addProvider(new BouncyCastleProvider());
		String algorithm = "SHA-256";
		String SECURITY_PROVIDER = "BC";

		MessageDigest digest = MessageDigest.getInstance(algorithm, SECURITY_PROVIDER);
		digest.update(bytes);
		byte[] hash = digest.digest();
		return Base64.getUrlEncoder().encodeToString(hash);
	}

	// Function to return the XOR
	// of the given strings
	public static byte[] getXOR(String a, String b) {
		byte[] aBytes = a.getBytes();
		byte[] bBytes = b.getBytes();
		// Lengths of the given strings
		int aLen = aBytes.length;
		int bLen = bBytes.length;

		// Make both the strings of equal lengths
		// by inserting 0s in the beginning
		if (aLen > bLen) {
			bBytes = prependZeros(bBytes, aLen - bLen);
		} else if (bLen > aLen) {
			aBytes = prependZeros(aBytes, bLen - aLen);
		}

		// Updated length
		int len = Math.max(aLen, bLen);
		byte[] xorBytes = new byte[len];

		// To store the resultant XOR
		for (int i = 0; i < len; i++) {
			xorBytes[i] = (byte)(aBytes[i] ^ bBytes[i]);
		}
		return xorBytes;
	}
	
	// Function to insert n 0s in the
	// beginning of the given string
<<<<<<< Updated upstream
	public static byte[] prependZeros(byte[] str, int n) {
=======
	private static byte[] prependZeros(byte[] str, int n) {
>>>>>>> Stashed changes
		byte[] newBytes = new byte[str.length + n];
		int i = 0;
		for (; i < n; i++) {
			newBytes[i] = 0;
		}
			
		for(int j = 0;i < newBytes.length; i++, j++) {
			newBytes[i] = str[j];
		}
			
		return newBytes;
	}
	
<<<<<<< Updated upstream
	public static byte[] getLastBytes(byte[] xorBytes, int lastBytesNum) {
=======
	private static byte[] getLastBytes(byte[] xorBytes, int lastBytesNum) {
>>>>>>> Stashed changes
		assert(xorBytes.length >= lastBytesNum);
		return Arrays.copyOfRange(xorBytes, xorBytes.length - lastBytesNum, xorBytes.length);
	}

	public static byte[] decodeHex(String hexData) throws DecoderException{
        return Hex.decodeHex(hexData);
    }
	
<<<<<<< Updated upstream
	public static byte[] hexStringToByteArray(String thumbprint) {
=======
	private static byte[] hexStringToByteArray(String thumbprint) {
>>>>>>> Stashed changes
		int len = thumbprint.length();
		byte[] data = new byte[len / 2];
		for (int i = 0; i < len; i += 2) {
			data[i / 2] = (byte) ((Character.digit(thumbprint.charAt(i), 16) << 4)
					+ Character.digit(thumbprint.charAt(i + 1), 16));
		}
		return data;
	}

<<<<<<< Updated upstream
	public static byte[] concatByteArrays(byte[] thumbprint, byte[] sessionkey, byte[] keySplitter, byte[] data) {
=======
	private static byte[] concatByteArrays(byte[] thumbprint, byte[] sessionkey, byte[] keySplitter, byte[] data) {
>>>>>>> Stashed changes
		ByteBuffer result = ByteBuffer.allocate(thumbprint.length + sessionkey.length + keySplitter.length + data.length);
		result.put(thumbprint);
		result.put(sessionkey);
		result.put(keySplitter);
		result.put(data);
		return result.array();
	}
}
